/**
 * PayementGateway is contract that each providers must implements.
 * All fee must be payed by user, if provider doesn`t has options for that,
 * then provider class must implement them by adding fee item to items
 */
export abstract class PaymentGateway {
	constructor(
		protected feeItemSku = "PLATFORM-FEE",
	) {}

	/**
	 * create or start a transaction
	 */
	abstract create(transaction: CreateTransaction): Promise<Transaction>;

	/**
	 * get transaction data using client defined transaction id
	 */
	abstract get(transactionId: string): Promise<Transaction>;

	/**
	 * return all available channel
	 */
	abstract channels(): Promise<Channel[]>;

	/**
	 * verifying signature from callback, and return Transaction data
	 */
	abstract verifyCallback(body: string, headers: Headers): Promise<Transaction>;
}

export type Channel = {
	/**
	 * Id for requesting to the payment gateway
	 */
	id: string;
	/** Name to be displayed on user side */
	name: string;
	/** channel category for grouping */
	category: ChannelCategory;
	/** fee that client must pay */
	fee: Fee;
};

export type ChannelCategory =
	| "unknown"
	| "e-wallet"
	| "store"
	| "virtual account";

export type Fee = {
	/**
	 * fee flat
	 */
	flat: number;
	/**
	 * fee percent are depends on the total price/amount
	 */
	percent: number;
	/**
	 * minimum amount of fee
	 */
	min: number;
	/**
	 * maximum amount of fee
	 */
	max: number;
};
/**
 * UNPAID: buyer did not paid yet
 * PAID: buyer already pay the transaction
 * EXPIRED: payment gateway server already mark it as expired
 * FAILED: in some rare case, transaction may failed
 * REFUND: buyer request for refund and was accepted by provider or their finance app
 */
export type TransactionState = "UNPAID" | "PAID" | "EXPIRED" | "FAILED" | "REFUND";

export type Transaction = {
	/** id generated from payment gateway provider */
	paymentId: string;
	/** id generated by your server */
	id: string;
	/** amount of the transaction, including tax */
	amount: number;
	/** items that buyed by buyer, may include tax item, or added by class instance */
	items: TransactionItem[];
	/** payment options for user pay to */
	payments: Payment[];
	/** hold customers data */
	customer: Customer;
	/** Payment state of the transaction */
	state: TransactionState;
};

type Customer = {
	name: string;
	email: string;
	/**
	 * this field maybe required for some channel
	 */
	phone?: string;
};

export type CreateTransaction = Omit<Transaction, "payments" | "amount" | "paymentId" | "state"> & {
	channel: string;
};

export type Payment =
	| {
		name: "qris";
		type: "raw";
		/** contain qris raw for generating qr */
		data: string;
	}
	| {
		name: "qris";
		type: "url";
		/** url of qris image */
		data: string;
	}
	| {
		/**
		 * Payment name like, qris, gopay, dana, VA, etc.
		 */
		name: string & {};
		type: string & {};
		/**
		 * Payment data like qris raw string, qris link url, va number
		 */
		data: string;
	};

export type TransactionItem = {
	/** sku of the item  */
	sku: string;
	/** price of the item */
	price: number;
	/** quantity of the item */
	quantity: number;
};
